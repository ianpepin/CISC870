import shared3p;
import shared3p_table_database;
import shared3p_matrix;
import stdlib;
import table_database;
import matrix;
import shared3p_join;
import shared3p_random;
import shared3p_sort;
import oblivious;

domain pd_shared3p shared3p;


template <domain D : shared3p>
D uint32[[2]] stretch(D uint32[[2]] rel, uint stretchBy) {
    uint numRows = shape(rel)[0];
    uint numCols = shape(rel)[1];
    uint numVals = numRows * stretchBy;
    D uint32[[2]] stretched(numVals, numCols);
    for (uint r = 0; r < numRows; r+=1) {
        // TODO figure out how to do this w/o the inner loop
        for (uint c = 0; c < numCols; c+=1) {
            stretched[r * stretchBy : (r + 1) * stretchBy,c] = rel[r,c];
        }
    }
    return stretched;
}

template <domain D : shared3p>
D uint32[[2]] duplicate(D uint32[[2]] rel, uint numDups) {
    uint numRows = shape(rel)[0];
    uint numVals = numRows * numDups;
    D uint32[[2]] dupped(numVals, shape(rel)[1]);
    for (uint r = 0; r < numDups; r+=1) {
        dupped[r * numRows : (r + 1) * numRows,:] = rel;
    }
    return dupped;
}

template <domain D : shared3p>
D uint32[[2]] filterByKeepFlags(D uint32[[2]] rel, uint32[[1]] keepFlags) {
    uint nrows = shape(rel)[0];
    uint ncols = shape(rel)[1];
    uint numResultRows = 0;
    for (uint r = 0; r < nrows; r+=1) {
        if (keepFlags[r] == 1) {
            numResultRows++;
        }
    }
    D uint32 [[2]] finalResult(numResultRows,ncols);
    uint resIdx = 0;
    for (uint r = 0; r < nrows; r+=1) {
        if (keepFlags[r] == 1) {
            finalResult[resIdx,:] = rel[r,:];
            resIdx++;
        }
    }
    return finalResult;
}

template <domain D : shared3p>
D uint32[[2]] joinFromEqFlags(D uint32[[1]] eqFlags, D uint32[[2]] left, uint leftJoinColIdx,
        D uint32[[2]] right, uint rightJoinColIdx, bool filter) {
    uint ncolsLeft = shape(left)[1];
    uint ncolsRight = shape(right)[1];
    D uint32[[2]] withFlags(size(eqFlags), ncolsLeft + ncolsRight + 1);
    withFlags[:, 0 : ncolsLeft] = left;
    withFlags[:, ncolsLeft : ncolsLeft + ncolsRight] = right;
    withFlags[:,ncolsLeft + ncolsRight] = eqFlags;
    if (filter) {
        D uint32[[2]] shuffledWithFlags = shuffleRows(withFlags);
        uint32[[1]] keepFlags = declassify(shuffledWithFlags[:,ncolsLeft + ncolsRight]);
        return filterByKeepFlags(shuffledWithFlags[:,0:ncolsLeft + ncolsRight], keepFlags);
    } else {
        return withFlags;
    }
}

template <domain D : shared3p>
D uint32[[2]] concatCols(D uint32[[2]] left, D uint32[[2]] right, bool filter) {
    assert(shape(left)[0] == shape(right)[0]);
    uint ncolsLeft = shape(left)[1];
    uint ncolsRight = shape(right)[1];
    print("start concatCols");
//    printMatrix(declassify(left));
//    printMatrix(declassify(right));
    D uint32[[2]] withFlags(shape(left)[0], ncolsLeft + ncolsRight - 1);
    withFlags[:, 0 : ncolsLeft] = left;
    D uint32 foo = left[0, 0] * right[0, 0];
    withFlags[:, ncolsLeft - 1: ncolsLeft + ncolsRight - 1] = right;
    print("done concatCols");
    return withFlags;
}

template <domain D : shared3p>
D uint32[[2]] mult(D uint32[[2]] left, D uint32[[2]] right) {
    assert(shape(left)[0] == shape(right)[0]);
    print("Start mult");
    D uint32[[2]] res = left * right;
    print("Done mult");
    return res;
}

template <domain D : shared3p>
D uint32[[2]] _obliviousJoin(D uint32[[2]] left, uint leftJoinColIdx, D uint32[[2]] right, uint rightJoinColIdx) {
    D uint32[[2]] leftShuffled = shuffleRows(left);
    D uint32[[2]] rightShuffled = shuffleRows(right);
    uint nrowsLeft = shape(left)[0];
    uint nrowsRight = shape(right)[0];
    D uint32[[2]] leftStretched = stretch(leftShuffled, nrowsRight);
    D uint32[[2]] rightDupped = duplicate(rightShuffled, nrowsLeft);
    D uint32[[1]] eqFlags = (uint32) (leftStretched[:,leftJoinColIdx] == rightDupped[:,rightJoinColIdx]);
    return joinFromEqFlags(eqFlags, leftStretched, leftJoinColIdx, rightDupped, rightJoinColIdx, true);
}

template <domain D : shared3p>
D uint32[[2]] _sizeObliviousJoin(D uint32[[2]] left, uint leftJoinColIdx, D uint32[[2]] right, uint rightJoinColIdx) {
    uint nrowsLeft = shape(left)[0];
    uint ncolsLeft = shape(left)[1];
    uint nrowsRight = shape(right)[0];
    uint ncolsRight = shape(right)[1];

    D uint32[[2]] leftStretched = stretch(left, nrowsRight);
    D uint32[[2]] rightDupped = duplicate(right, nrowsLeft);
    D uint32[[1]] eqFlags = (uint32) (leftStretched[:,leftJoinColIdx] == rightDupped[:,rightJoinColIdx]);
    D uint32[[1]] leftFlags = leftStretched[:, ncolsLeft - 1]; // last col is for keep flags
    D uint32[[1]] rightFlags = rightDupped[:, ncolsRight -1];
    eqFlags = eqFlags * leftFlags * rightFlags;
    return joinFromEqFlags(eqFlags, leftStretched[:,:ncolsLeft - 1],
        leftJoinColIdx, rightDupped[:,:ncolsRight -1], rightJoinColIdx, false);
}

template <domain D : shared3p>
D uint32[[2]] join(D uint32[[2]] leftRel, uint[[1]] leftJoinCols,
    D uint32[[2]] rightRel, uint[[1]] rightJoinCols, uint[[1]] colsToKeep) {
    D uint32[[2]] res = _sizeObliviousJoin(leftRel, leftJoinCols[0], rightRel, rightJoinCols[0]);
    return project(res, colsToKeep);
}

template <domain D : shared3p>
D uint32[[2]] joinLeaky(D uint32[[2]] leftRel, uint[[1]] leftJoinCols,
    D uint32[[2]] rightRel, uint[[1]] rightJoinCols, uint[[1]] colsToKeep) {
    D uint32[[2]] res = _obliviousJoin(leftRel, leftJoinCols[0], rightRel, rightJoinCols[0]);
    return project(res, colsToKeep);
}

template <domain D : shared3p>
D uint32[[2]] aggregateSumLeaky(D uint32[[2]] rows, uint keyCol, uint valCol) {
    uint nrows = shape(rows)[0];
    uint ncols = 2;

    D uint32 [[2]] input(nrows, ncols);
    input[:,0] = rows[:,keyCol];
    input[:,1] = rows[:,valCol];

    D uint32 [[2]] sorted = sortingNetworkSort(input, (uint)0);
    D uint32 [[2]] result(nrows,ncols + 1);
    result[:,0] = sorted[:,0];
    result[:,1] = sorted[:,1];

    pd_shared3p uint32[[1]] leftKeyCols = result[0:nrows-1,0];
    pd_shared3p uint32[[1]] rightKeyCols = result[1:,0];
    pd_shared3p uint32[[1]] eqFlags = (uint32)(leftKeyCols == rightKeyCols);
    for (uint r = 0; r < nrows - 1; r+=1) {
        D uint32[[1]] left = result[r,:];
        D uint32[[1]] right = result[r + 1,:];
        D uint32 eqFlag = eqFlags[r];
        D uint32 leftVal = left[1];
        D uint32 rightVal = right[1];
        result[r, 1] = leftVal * (1 - eqFlag);
        result[r + 1, 1] = rightVal + leftVal * (eqFlag);
        result[r, 2] = 1 - eqFlag;
        result[r + 1, 2] = 1 - eqFlag;
    }
    // always keep last row
    result[nrows - 1, 2] = 1;
    D uint32 [[2]] shuffledWithFlags = shuffleRows(result);
    uint32 [[1]] keepFlags = declassify(shuffledWithFlags[:,2]);
    return filterByKeepFlags(shuffledWithFlags[:,0:2], keepFlags);;
}

template <domain D : shared3p>
D uint32[[2]] aggregateSum(D uint32[[2]] rows, uint keyCol, uint valCol) {
    uint nrows = shape(rows)[0];
    uint ncols = 3;
    D uint32 [[2]] input(nrows, ncols);
    D uint32 [[1]] _keepFlags = rows[:,shape(rows)[1] - 1];
    uint32 [[1]] ones(nrows) = 1;
    input[:,0] = (rows[:,keyCol] * _keepFlags) + (ones - _keepFlags) * (-1); // assuming no real key entries are -1
    input[:,1] = rows[:,valCol]; // zero out by keep flags
    input[:,2] = _keepFlags;

    D uint32 [[2]] sorted = sortingNetworkSort(input, (uint)0);
    D uint32 [[2]] result(nrows,ncols);
    result[:,0] = sorted[:,0];
    result[:,1] = sorted[:,1];
    D uint32 [[1]] keepFlags = sorted[:,2];

    pd_shared3p uint32[[1]] leftKeyCols = result[0:nrows-1,0];
    pd_shared3p uint32[[1]] rightKeyCols = result[1:,0];
    pd_shared3p uint32[[1]] eqFlags = (uint32)(leftKeyCols == rightKeyCols);
    for (uint r = 0; r < nrows - 1; r+=1) {
        D uint32[[1]] left = result[r,:];
        D uint32[[1]] right = result[r + 1,:];
        D uint32 eqFlag = eqFlags[r];
        D uint32 leftVal = left[1];
        D uint32 rightVal = right[1];
        result[r, 1] = leftVal * (1 - eqFlag);
        result[r + 1, 1] = rightVal + leftVal * (eqFlag);
        result[r, 2] = 1 - eqFlag;
        result[r + 1, 2] = 1 - eqFlag;
    }
    // always keep last row
    result[nrows - 1, 2] = 1;
    result[:, 2] = result[:, 2] * keepFlags;
    return result;
}

template <domain D : shared3p>
D uint32[[2]] indexAggregateNonLeaky(D uint32[[2]] rows, uint keyCol, uint valCol,
        D uint32[[2]] wrappedEqFlags, D uint32[[2]] keysWithIndeces) {
    uint nrows = shape(rows)[0];
    uint ncols = 2;

    D uint32 [[2]] input(nrows, ncols);
    input[:,0] = rows[:,keyCol];
    input[:,1] = rows[:,valCol];

    D uint32 [[1]] eqFlags = wrappedEqFlags[:,0];
    uint32 [[1]] newIndeces = declassify(keysWithIndeces[:,0]);
    D uint32 [[2]] sorted(nrows, ncols);
    for (uint r = 0; r < nrows; r+=1) {
        sorted[r,:] = input[(uint)newIndeces[r],:];
    }

    for (uint r = 0; r < nrows - 1; r+=1) {
        D uint32[[1]] left = sorted[r,:];
        D uint32[[1]] right = sorted[r + 1,:];
        D uint32 eqFlag = eqFlags[r];

        D uint32 leftVal = left[1];
        D uint32 rightVal = right[1];
        sorted[r, 1] = leftVal * (1 - eqFlag);
        sorted[r + 1,1] = rightVal + leftVal * (eqFlag);
    }
    // TODO re-use code from regular aggregation
    D uint32[[1]] zeroValFlags = (uint32)(sorted[:,1] != 0);
    D uint32 [[2]] result(nrows,ncols + 1);
    result[:,0] = sorted[:,0];
    result[:,1] = sorted[:,1];
    result[:,2] = zeroValFlags[:];
    D uint32 [[2]] shuffled = shuffleRows(result);

    uint32 [[1]] keepFlags = declassify(shuffled[:,2]);
    uint numResultRows = 0;
    for (uint r = 0; r < nrows; r+=1) {
        if (keepFlags[r] == 1) {
            numResultRows++;
        }
    }
    D uint32 [[2]] finalResult(numResultRows,ncols);
    uint resIdx = 0;
    for (uint r = 0; r < nrows; r+=1) {
        if (keepFlags[r] == 1) {
            finalResult[resIdx,0] = shuffled[r,0];
            finalResult[resIdx,1] = shuffled[r,1];
            resIdx++;
        }
    }
    return finalResult;
}

template <domain D : shared3p>
D uint32[[2]] project(D uint32[[2]] rows, uint[[1]] selectedCols) {
    uint nrows = shape(rows)[0];
    uint ncols = size(selectedCols);
    print("start project");
    D uint32 [[2]] projected(nrows, ncols);
    D uint32 beacon = 1;
    for (uint c = 0; c < ncols; ++c) {
        projected[:, c] = rows[:, selectedCols[c]];
        declassify(beacon);
    }
    print("done project");
    return projected;
}

template <domain D : shared3p>
D uint32[[2]] multiply(D uint32[[2]] rows, uint targetColIdx, uint[[1]] operands, uint[[1]] scalarFlags) {
    D uint32 [[2]] res = rows;
    if (scalarFlags[0] == 0) {
        // column operand
        res[:, targetColIdx] = rows[:, operands[0]];
    }
    else {
        // scalar operand
        D uint32 scalar = (uint32) operands[0];
        res[:, targetColIdx] = scalar;
    }
    for (uint c = 1; c < size(operands); ++c) {
        if (scalarFlags[c] == 0) {
            // column operand
            res[:, targetColIdx] = res[:, targetColIdx] * rows[:, operands[c]];
        }
        else {
            // scalar operand
            D uint32 scalar = (uint32) operands[c];
            res[:, targetColIdx] = res[:, targetColIdx] * scalar;
        }
    }
    return res;
}

template <domain D : shared3p>
D uint32[[2]] divide(D uint32[[2]] rows, uint targetColIdx, uint[[1]] operands, uint[[1]] scalarFlags) {
    D uint32 [[2]] divided = rows;
    if (scalarFlags[0] == 0) {
        // column operand
        divided[:, targetColIdx] = rows[:, operands[0]];
    }
    else {
        // scalar operand
        D uint32 scalar = (uint32) operands[0];
        divided[:, targetColIdx] = scalar;
    }
    for (uint c = 1; c < size(operands); ++c) {
        if (scalarFlags[c] == 0) {
            // column operand
            divided[:, targetColIdx] = divided[:, targetColIdx] / rows[:, operands[c]];
        }
        else {
            // scalar operand
            D uint32 scalar = (uint32) operands[c];
            divided[:, targetColIdx] = divided[:, targetColIdx] / scalar;
        }
    }
    return divided;
}

pd_shared3p uint32 [[2]] readFromDb(string ds, string tbl, bool flags) {
    uint ncols = tdbGetColumnCount(ds, tbl);
    uint nrows = tdbGetRowCount(ds, tbl);

    uint actualCols = ncols + (uint) flags;

    pd_shared3p uint32 [[2]] mat(nrows, actualCols);
    pd_shared3p uint32 beacon = 1;
    for (uint c = 0; c < ncols; ++c) {
        print("start reading column");
        pd_shared3p uint32 [[1]] col = tdbReadColumn(ds, tbl, c);
        mat[ : , c] = col;
        declassify(beacon);
        print("done reading column");
    }
    if (flags) {
        mat[:,ncols] = 1;
    }
    return mat;
}

pd_shared3p uint32 [[2]] readFromDb(string ds, string tbl) {
    return readFromDb(ds, tbl, false);
}

template <domain D : shared3p>
void persist(string ds, string tableName, D uint32[[2]] rows) {
    uint nrows = shape(rows)[0];
    uint ncols = shape(rows)[1];
    if (tdbTableExists(ds, tableName)) {
        tdbTableDelete(ds, tableName);
    }
    pd_shared3p uint32 vtype;
    tdbTableCreate(ds, tableName, vtype, ncols);
    uint params = tdbVmapNew();
    for (uint rowIdx = 0; rowIdx < nrows; ++rowIdx) {
        if (rowIdx != 0) {
            // This has to be called in-between rows
            tdbVmapAddBatch(params);
        }
        tdbVmapAddValue(params, "values", rows[rowIdx,:]);
    }
    tdbInsertRow(ds, tableName, params);
    tdbVmapDelete(params);
}

template <domain D : shared3p>
D uint32[[2]] indexJoin(D uint32[[2]] leftRel, uint leftJoinCol, D uint32[[2]] rightRel,
        uint rightJoinCol, uint32[[2]] indeces) {
    uint nrows = shape(indeces)[0];
    uint ncolsLeft = shape(leftRel)[1];
    uint ncolsRight = shape(rightRel)[1];
    uint ncolsRes = ncolsLeft + ncolsRight - 1;
    pd_shared3p uint32 [[2]] result(nrows, ncolsRes);
    for (uint r = 0; r < nrows; ++r) {
        uint lidx = (uint) indeces[r, 0];
        uint ridx = (uint) indeces[r, 1];
        for (uint c = 0; c < ncolsLeft; ++c) {
            result[r,c] = leftRel[lidx,c];
        }
        uint offset = ncolsLeft;
        uint nextIdx = 0;
        for (uint c = 0; c < ncolsRight; ++c) {
            if (c != rightJoinCol) {
                result[r,nextIdx + offset] = rightRel[ridx,c];
                nextIdx++;
            }
        }
    }
    return shuffleRows(result);
}

template <domain D : shared3p>
D uint32[[2]] indexAggregateSum(D uint32[[2]] rows, uint valCol, D uint32[[2]] keys, uint32[[2]] indeces) {
    uint nkeys = shape(keys)[0];
    uint nrows = shape(rows)[0];
    uint ncols = 2;

    D uint32 [[2]] res(nkeys, ncols);
    res[:,0] = keys[:,0];
    res[:,1] = 0;

    for (uint r = 0; r < nrows; r+=1) {
        uint rowIdx = (uint)indeces[r,0];
        uint keyIdx = (uint)indeces[r,1];
        res[keyIdx,1] = res[keyIdx,1] + rows[rowIdx,valCol];
    }

    return res;
}

template <domain D : shared3p>
D uint32[[2]] flagJoin(D uint32[[2]] eqFlags, D uint32[[2]] left, uint leftJoinCol, D uint32[[2]] right,
        uint rightJoinCol, uint[[1]] colsToKeep) {
    uint nrowsLeft = shape(left)[0];
    uint nrowsRight = shape(right)[0];
    D uint32[[2]] leftStretched = stretch(left, nrowsRight);
    D uint32[[2]] rightDupped = duplicate(right, nrowsLeft);
    D uint32[[2]] res = joinFromEqFlags(eqFlags[:,0], leftStretched, leftJoinCol, rightDupped, rightJoinCol, true);
    return project(res, colsToKeep);
}

template <domain D : shared3p>
uint32[[2]] declassifyWrapper(D uint32[[2]] rows, bool filter) {
    if (filter) {
        uint ncols = shape(rows)[1];
        D uint32[[2]] shuffled = shuffleRows(rows);
        return declassify(
            filterByKeepFlags(
                shuffled[:,:ncols - 1],
                declassify(shuffled[:,ncols - 1])
            )
        );
    } else {
        return declassify(rows);
    }
}

template <domain D : shared3p>
D uint32[[2]] filterLt(D uint32[[2]] rows,
        uint[[1]] ltIndexesLeft,
        uint[[1]] ltIndexesRight) {
    assert(size(ltIndexesLeft) == size(ltIndexesRight));
    print("start filterLt");
    uint nrows = shape(rows)[0];
    uint ncols = shape(rows)[1];
    uint numComps = size(ltIndexesLeft);

    // last column has keep flags
    D uint32[[1]] finalFlags = rows[:,ncols - 1];
    uint numLts = size(ltIndexesLeft);
    for (uint c = 0; c < numLts; ++c) {
        D uint32[[1]] compColLeft = rows[:,ltIndexesLeft[c]];
        D uint32[[1]] compColRight = rows[:,ltIndexesRight[c]];
        D uint32[[1]] compRes = (uint32) (compColLeft < compColRight);
        finalFlags = finalFlags * compRes;
    }
    rows[:,ncols - 1] = finalFlags;
    print("done filterLt");
    return rows;
}

template <domain D : shared3p>
D uint32[[2]] filterEq(D uint32[[2]] rows,
        uint[[1]] ltIndexesLeft,
        uint[[1]] scalars) {
    assert(size(ltIndexesLeft) == size(scalars));
    print("start filterEq");
    uint nrows = shape(rows)[0];
    uint ncols = shape(rows)[1];
    uint numComps = size(ltIndexesLeft);

    // last column has keep flags
    D uint32[[1]] finalFlags = rows[:,ncols - 1];
    uint numLts = size(ltIndexesLeft);
    for (uint c = 0; c < numLts; ++c) {
        D uint32[[1]] compColLeft = rows[:,ltIndexesLeft[c]];
        D uint32[[1]] compRes = (uint32) (compColLeft == (uint32) scalars[c]);
        finalFlags *= compRes;
    }
    rows[:,ncols - 1] = finalFlags;
    print("done filterEq");
    return rows;
}

template <domain D : shared3p>
D uint32[[2]] distinctCount(D uint32[[2]] rows, uint keyCol, bool useSort) {
    print("start distinctCount");
    pd_shared3p uint32 beacon = 1;
    uint nrows = shape(rows)[0];
    uint ncols = shape(rows)[1];

    D uint32 [[2]] input(nrows, 2);
    input[:,0] = rows[:,keyCol];
    declassify(beacon);
    input[:,1] = rows[:,ncols - 1];
    declassify(beacon);
    // assumes -1 not in input
    input[:,0] = (input[:,0] * input[:,1]) + (1 - input[:,1]) * (-1);

    D uint32 [[2]] sorted;
    if (useSort) {
        input[:,0] = (input[:,0] * input[:,1]) + (1 - input[:,1]) * (-1);
        sorted = sortingNetworkSort(input, (uint) 0);

        pd_shared3p uint32[[1]] left = sorted[0:nrows-1,0];
        pd_shared3p uint32[[1]] right = sorted[1:,0];

        pd_shared3p uint32[[1]] eqFlags = 1 - (uint32)(left == right);
        pd_shared3p uint32[[1]] eqFlagsPlusOne(nrows);
        eqFlagsPlusOne[:nrows-1] = eqFlags;
        eqFlagsPlusOne[nrows-1] = 1;
        D uint32 [[1]] final = eqFlagsPlusOne;

        D uint32 [[2]] res(1, 2);
        D uint32 isLastDummy = 1 - sorted[nrows-1, 1];

        res[0,0] = sum(final) - isLastDummy;
        res[0,1] = 1;
        print("done distinctCount");
        return res;
    } else {
        sorted = input;
        for (uint r = 1; r < nrows; r+=1) {
            D uint32 this = sorted[r, 0];
            D uint32 prev = sorted[r - 1, 0];
            sorted[r, 0] = sorted[r, 1] * (this - prev) + prev;
        }
        pd_shared3p uint32[[1]] left = sorted[0:nrows-1,0];
        pd_shared3p uint32[[1]] right = sorted[1:,0];

        pd_shared3p uint32[[1]] eqFlags = 1 - (uint32)(left == right);
        pd_shared3p uint32[[1]] eqFlagsPlusOne(nrows);
        eqFlagsPlusOne[:nrows-1] = eqFlags;
        eqFlagsPlusOne[nrows-1] = 1;
        D uint32 [[1]] final = eqFlagsPlusOne;

        D uint32 [[2]] res(1, 2);
        // we are over by one if the first entries are dummies
        D uint32 isFirstDummy = 1 - sorted[0, 1];
        res[0,0] = sum(final) - isFirstDummy;
        res[0,1] = 1;
        print("done distinctCount");
        return res;
    }
}

template <domain D : shared3p>
D uint32[[2]] _index(D uint32[[2]] values, D uint32[[1]] flags) {
    uint nrows = shape(values)[0];
    uint ncols = shape(values)[1];
    D uint32[[2]] res(nrows, ncols + 2);
    res[ : , 2 : ncols + 2] = values;
    uint32[[1]] indexes(nrows);
    for (uint idx = 0; idx < nrows; ++idx) {
        indexes[idx] = (uint32) idx;
    }
    res[ : , 0] = (uint32) indexes;
    res[ : , 1] = flags;
    return res;
}

template <domain D : shared3p>
D uint32[[2]] _pad(D uint32[[2]] values, uint numPads) {
    uint nrows = shape(values)[0];
    uint ncols = shape(values)[1];
    D uint32[[2]] res(nrows + numPads, ncols);
    uint32[[2]] pads(numPads, ncols);
    res[: nrows, :] = values;
    res[nrows : , :] = (uint32) pads;
    return res;
}

template <domain D : shared3p>
D uint32[[2]] oblIdxStepOne(string prefix, D uint32[[2]] input, D uint32[[2]] encodedWrapped, D uint32[[2]] numLookupsWrapped) {
    uint numLookups = (uint) declassify(numLookupsWrapped[0 , 0]);
    pd_shared3p uint32[[1]] encoded = encodedWrapped[ : , 0];
    pd_shared3p uint32[[2]] indexed = _index(input, encoded);

    pd_shared3p uint32[[2]] padded = _pad(indexed, numLookups);
    //pd_shared3p uint32[[2]] shuffled = shuffleRows(padded);
    pd_shared3p uint32[[2]] shuffled = padded;

    uint numShuffledCols = shape(shuffled)[1];
    pd_shared3p uint32[[2]] indexesAndFlags = shuffled[ : , 0 : 2];

    persist("DS1", prefix + "_shuffled_shark", shuffled[ : , 1 : ]);
    //publish(prefix + "_indexes_and_flags", declassify(indexesAndFlags));
    return indexesAndFlags;
}



template <domain D : shared3p>
D uint32[[2]] rearrangeByIndexes(D uint32[[2]] rel, uint32[[1]] indexes) {
    uint nrows = shape(rel)[0];
    uint ncols = shape(rel)[1];
    uint nindexes = size(indexes);
    pd_shared3p uint32 [[2]] res(nrows, ncols);
    for (uint r = 0; r < nindexes; ++r) {
        uint idx = (uint) indexes[r];
        res[r , : ] = rel[idx , : ];
    }
    // remove excess dummy elements and lookup column
    return res[ : nindexes, : ];
}

template <domain D : shared3p>
D uint32[[2]] rearrangeByIndexesOther(D uint32[[2]] rel, uint32[[1]] indexes) {
    uint nrows = shape(rel)[0];
    uint ncols = shape(rel)[1];
    uint nindexes = size(indexes);
    pd_shared3p uint32 [[2]] res(nrows, ncols);
    for (uint r = 0; r < nindexes; ++r) {
        uint idx = (uint) indexes[r];
        res[idx , : ] = rel[r , : ];
    }
    return res;
}

template <domain D : shared3p>
D uint32[[2]] obliviousCopy(D uint32[[2]] rel, uint flagColumn) {
    uint nrows = shape(rel)[0];
    D bool[[1]] eqFlags = (bool) rel[ : , flagColumn]; // should be bool to begin with?
    for (uint r = 0; r < nrows - 1; r+=1) {
        D uint32[[1]] left = rel[r , : ];
        D uint32[[1]] right = rel[r + 1 , :];
        D bool eqFlag = eqFlags[r + 1];
        rel[r + 1, : ] = choose(eqFlag, right, left);
    }
    return rel[ : , 1 : ];
}

template <domain D : shared3p>
D uint32 [[2]] oblIdxStepTwo(string prefix, D uint32 [[2]] indexes_closed, D uint32 [[2]] original_ordering_closed) {
    D uint32 [[2]] shuffled_shark = readFromDb("DS1", prefix + "_shuffled_shark");
    //uint32 [[1]] shark_indexes = declassify(readFromDb("DS1", prefix + "_shark_indexes"))[ : , 0];
    uint32 [[1]] shark_indexes = declassify(indexes_closed)[ : , 0];
    //uint32 [[1]] original_ordering = declassify(readFromDb("DS1", prefix + "_original_ordering"))[ : , 0];
    uint32 [[1]] original_ordering = declassify(original_ordering_closed)[ : , 0];
    D uint32 [[2]] rearranged = rearrangeByIndexes(shuffled_shark, shark_indexes);
    D uint32 [[2]] copied = obliviousCopy(rearranged, (uint) 0);
    return rearrangeByIndexesOther(copied, original_ordering);
}

template <domain D : shared3p>
D uint32 [[2]] combineJoinSides(D uint32 [[2]] left_side, D uint32 [[2]] right_side) {
    assert(shape(left_side)[0] == shape(right_side)[0]);
    assert(shape(left_side)[1] == shape(right_side)[1]);
    uint nrows = shape(left_side)[0];
    uint ncols = shape(left_side)[1];
    D uint32 [[2]] shark_joined(nrows, 2 * ncols - 1);
    shark_joined[ : , : ncols] = left_side[ : , : ];
    shark_joined[ : , ncols: ] = right_side[ : , 1 : ]; // skip redundant key-column
    D uint32 [[2]] joined_and_shuffled = shuffleRows(shark_joined);
    return joined_and_shuffled;
}

void main() {
    string ds = "DS1";
    tdbOpenConnection(ds);
{{{PROTOCOL_CODE}}}
    tdbCloseConnection(ds);
}
